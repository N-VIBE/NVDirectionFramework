// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name NVDirectionKit
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import CoreLocation
import CoreML
import CoreMotion
import Foundation
import MapKit
@_exported import NVDirectionKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc open class NVibeMultimodalStepInformation : ObjectiveC.NSObject {
  public enum Mode : Swift.String {
    case WALKING
    case TRANSIT
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var mode: NVDirectionKit.NVibeMultimodalStepInformation.Mode
  @_documentation(visibility: private) public init(mode: NVDirectionKit.NVibeMultimodalStepInformation.Mode)
  public func getWalkingInformation() -> NVDirectionKit.NVibeWalkingInformation?
  public func getTransitInformation() -> NVDirectionKit.NVibeTransitInformation?
  @objc deinit
}
@objc open class NVibeWalkingInformation : NVDirectionKit.NVibeMultimodalStepInformation {
  public enum Mode : Swift.String {
    case DEFAULT
    case LINKS
    case INDOOR
    case TRANSIT_CHANGE
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var startAddress: NVDirectionKit.NVibeLocation
  public var endAddress: NVDirectionKit.NVibeLocation
  public var walkingMode: NVDirectionKit.NVibeWalkingInformation.Mode
  public var departureRef: Swift.String?
  public var arrivalRef: Swift.String?
  public var links: [NVDirectionKit.Link]?
  public var via: Swift.String?
  @_documentation(visibility: private) public init(startAddress: NVDirectionKit.NVibeLocation, endAddress: NVDirectionKit.NVibeLocation, walkingMode: NVDirectionKit.NVibeWalkingInformation.Mode)
  @objc deinit
}
@objc open class NVibeTransitInformation : NVDirectionKit.NVibeMultimodalStepInformation {
  public enum Mode : Swift.String {
    case TRAM
    case TRAIN
    case SUBWAY
    case BUS
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var transitMode: NVDirectionKit.NVibeTransitInformation.Mode
  public var headsign: Swift.String
  public var backgroundColor: Swift.String
  public var textColor: Swift.String
  public var type: Swift.String
  public var line: Swift.String
  public var stops: [NVDirectionKit.NVibeLocation]
  public var departureTime: Swift.String
  public var duration: Swift.Double
  public var departureRef: Swift.String?
  public var arrivalRef: Swift.String?
  public var coordinates: [CoreLocation.CLLocationCoordinate2D] {
    get
  }
  public var distance: Swift.Int {
    get
  }
  public var stopNumber: Swift.Int {
    get
  }
  public var departureStop: NVDirectionKit.NVibeLocation {
    get
  }
  public var arrivalStop: NVDirectionKit.NVibeLocation {
    get
  }
  @_documentation(visibility: private) public init(transitMode: NVDirectionKit.NVibeTransitInformation.Mode, headsign: Swift.String, backgroundColor: Swift.String, textColor: Swift.String, type: Swift.String, line: Swift.String, stops: [NVDirectionKit.NVibeLocation], departureTime: Swift.String, duration: Swift.Double)
  @_documentation(visibility: private) public init(transitMode: Swift.String, headsign: Swift.String, backgroundColor: Swift.String, textColor: Swift.String, type: Swift.String, line: Swift.String, stops: [NVDirectionKit.NVibeLocation], departureTime: Swift.String, duration: Swift.Double, id: Swift.String)
  public func toGPX(speed: Swift.Double = 11000.0) -> Swift.String
  @objc deinit
}
extension Swift.Int {
  public func getDuration() -> Swift.String
}
extension Swift.Dictionary {
  @_documentation(visibility: private) public func percentEncoded() -> Foundation.Data?
}
@objc @_documentation(visibility: private) public class NVibeProjection : ObjectiveC.NSObject {
  public var origin: CoreLocation.CLLocationCoordinate2D
  public var projection: CoreLocation.CLLocationCoordinate2D
  public var distance: Swift.Double
  public var index: Swift.Int
  public var onEdge: Swift.Bool
  public var onExtremity: Swift.Bool
  public init(origin: CoreLocation.CLLocationCoordinate2D, projection: CoreLocation.CLLocationCoordinate2D, distance: Swift.Double, index: Swift.Int, onEdge: Swift.Bool, onExtremity: Swift.Bool)
  @objc deinit
}
@objc open class NVibeManeuverDetail : ObjectiveC.NSObject, Swift.Codable {
  public var type: Swift.String
  public var modifier: Swift.String?
  public var name: Swift.String?
  public var instruction: Swift.String
  @_documentation(visibility: private) public init(type: Swift.String, modifier: Swift.String? = nil, name: Swift.String? = nil, instruction: Swift.String)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_documentation(visibility: private) public protocol Location {
  var address: Swift.String { get set }
  var position: CoreLocation.CLLocationCoordinate2D { get set }
  var access: CoreLocation.CLLocationCoordinate2D { get set }
}
@objc public class NVibeLocation : ObjectiveC.NSObject, NVDirectionKit.Location {
  public var address: Swift.String
  public var position: CoreLocation.CLLocationCoordinate2D
  public var access: CoreLocation.CLLocationCoordinate2D
  public var reference: Swift.String?
  @_documentation(visibility: private) public init(address: Swift.String = "", position: CoreLocation.CLLocationCoordinate2D, access: CoreLocation.CLLocationCoordinate2D? = nil, reference: Swift.String? = nil)
  public init(address: Swift.String, position: CoreLocation.CLLocationCoordinate2D, access: CoreLocation.CLLocationCoordinate2D)
  public init(address: Swift.String, position: CoreLocation.CLLocationCoordinate2D)
  public init(position: CoreLocation.CLLocationCoordinate2D, access: CoreLocation.CLLocationCoordinate2D)
  public init(position: CoreLocation.CLLocationCoordinate2D)
  @objc deinit
}
extension CoreLocation.CLLocationCoordinate2D {
  public func toLocation() -> CoreLocation.CLLocation
  public func direction(from previousCoordinate: CoreLocation.CLLocationCoordinate2D, to nextCoordinate: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public func direction(to coordinate: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public func distance(to coordinate: CoreLocation.CLLocationCoordinate2D) -> Swift.Double
  public func moveCoordinate(distance: CoreLocation.CLLocationDistance, direction: CoreLocation.CLLocationDirection) -> CoreLocation.CLLocationCoordinate2D
  public func moveCoordinate(distance: CoreLocation.CLLocationDistance, direction: CoreLocation.CLLocationDirection, side: Swift.String) -> CoreLocation.CLLocationCoordinate2D?
  public func moveCoordinate(distance: CoreLocation.CLLocationDistance, direction: CoreLocation.CLLocationDirection, side: NVDirectionKit.SideStreet) -> CoreLocation.CLLocationCoordinate2D?
  public func isOnSegment(from A: CoreLocation.CLLocationCoordinate2D, to B: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
  public func projectOnSegment(from A: CoreLocation.CLLocationCoordinate2D, to B: CoreLocation.CLLocationCoordinate2D) -> CoreLocation.CLLocationCoordinate2D
  public func projectOn(polyline: [CoreLocation.CLLocationCoordinate2D]) -> NVDirectionKit.NVibeProjection
}
extension Swift.Array where Element == CoreLocation.CLLocationCoordinate2D {
  public func getDistance() -> Swift.Double?
  public func toGPX() -> Swift.String
}
extension CoreLocation.CLLocationCoordinate2D : Swift.Equatable {
}
@_documentation(visibility: private) public func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
@_documentation(visibility: private) public protocol NVPhoneDirectionManagerDelegate : AnyObject {
  func onPhoneDirectionUpdated(heading: Swift.Double?)
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) open class NVPhoneDirection : ObjectiveC.NSObject {
  public static let shared: NVDirectionKit.NVPhoneDirection
  public var isPhoneDirectionUpdateRunning: Swift.Bool
  weak public var delegate: (any NVDirectionKit.NVPhoneDirectionManagerDelegate)?
  public var isOutdoorOffsetAvailable: Swift.Bool {
    get
  }
  public func startPhoneDirectionUpdate(completion: @escaping () -> Swift.Void)
  public func stopPhoneDirectionUpdate()
  public func setFollowedUserDirection(direction: CoreLocation.CLLocationDirection?)
  public func resetOffsetData()
  @objc override dynamic public init()
  @objc deinit
}
extension NVDirectionKit.NVPhoneDirection : NVDirectionKit.PhoneDirectionManagerDelegate {
  public func onDirectionChanged(heading: Swift.Double?)
}
extension CoreLocation.CLDeviceOrientation {
  @_documentation(visibility: private) public func toString() -> Swift.String
}
@objc @_inheritsConvenienceInitializers open class NVDirection : ObjectiveC.NSObject {
  public static let shared: NVDirectionKit.NVDirection
  public func getMultimodalRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, onlyFullWalking: Swift.Bool = false, withFullWalkingAlternative: Swift.Bool = false, avoid: [NVDirectionKit.NVibeTransitInformation.Mode] = [], completion: @escaping ([NVDirectionKit.NVibeMultimodalRoute]?, NVDirectionKit.MultimodalError?) -> Swift.Void)
  public func getMultimodalRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, onlyFullWalking: Swift.Bool = false, withFullWalkingAlternative: Swift.Bool = false, avoid: [NVDirectionKit.NVibeTransitInformation.Mode] = []) async throws -> [NVDirectionKit.NVibeMultimodalRoute]
  public func getNextDeparture(from information: NVDirectionKit.NVibeTransitInformation, count: Swift.Int = 1, completion: @escaping ([Swift.String]) -> Swift.Void)
  public func getNextDeparture(from information: NVDirectionKit.NVibeTransitInformation, count: Swift.Int = 1) async throws -> [Swift.String]
  public func getStartingDirection(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, completion: @escaping (CoreLocation.CLLocationDirection?, NVDirectionKit.RouteError?) -> Swift.Void)
  public func getStartingDirection(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation) async throws -> CoreLocation.CLLocationDirection?
  public func getNavigationRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, sideStreet: NVDirectionKit.SideStreet? = nil, language: Swift.String = "en", withObstacle: Swift.Bool = false, forbiddenObstacles: [Swift.String] = [], withInformationPoint: Swift.Bool = false, withAlternativePolyline: Swift.Bool = false, completion: @escaping ((route: NVDirectionKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection, solutionFound: Swift.Bool)?, NVDirectionKit.RouteError?) -> Swift.Void)
  public func getNavigationRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, sideStreet: NVDirectionKit.SideStreet? = nil, language: Swift.String = "en", withObstacle: Swift.Bool = false, forbiddenObstacles: [Swift.String] = [], withInformationPoint: Swift.Bool = false, withAlternativePolyline: Swift.Bool = false) async throws -> (route: NVDirectionKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection, solutionFound: Swift.Bool)
  public func getCustomNavigationRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, with coordinates: [CoreLocation.CLLocationCoordinate2D], language: Swift.String = "en", completion: @escaping ((route: NVDirectionKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection)?, NVDirectionKit.RouteError?) -> Swift.Void)
  public func getCustomNavigationRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, with coordinates: [CoreLocation.CLLocationCoordinate2D], language: Swift.String = "en") async throws -> (route: NVDirectionKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection)
  public func cancelRoute()
  public func getNavigationRoute(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, sideStreet: NVDirectionKit.SideStreet? = nil, option: NVDirectionKit.NVibeRouteOption) async throws -> (route: NVDirectionKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection, solutionFound: Swift.Bool)
  public func getNavigationRouteWithoutCrossing(from startLocation: NVDirectionKit.NVibeLocation, to endLocation: NVDirectionKit.NVibeLocation, option: NVDirectionKit.NVibeRouteOption) async throws -> (route: NVDirectionKit.NVibeRoute, startingDirection: CoreLocation.CLLocationDirection)
  @objc override dynamic public init()
  @objc deinit
}
@objc open class NVibeObstacle : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.String
  public var type: Swift.String
  public var name: Swift.String
  public var position: [Swift.Double]
  public var projection: [Swift.Double]
  public var photo: Swift.String?
  @_documentation(visibility: private) public var distance: Swift.Double?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_documentation(visibility: private) public struct RouteResponse : Swift.Codable {
  public var code: Swift.Int
  public var data: NVDirectionKit.RouteData?
  public var success: Swift.Bool
  public var message: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_documentation(visibility: private) public struct RouteData : Swift.Codable {
  public var distance: Swift.Double
  public var duration: Swift.Double
  public var geometry: Swift.String
  public var legs: [NVDirectionKit.NVibeLeg]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@objc open class NVibeRoute : ObjectiveC.NSObject {
  public var startAddress: NVDirectionKit.NVibeLocation
  public var endAddress: NVDirectionKit.NVibeLocation
  public var duration: Swift.Double {
    get
    set
  }
  public var distance: Swift.Double
  public var legs: [NVDirectionKit.NVibeLeg]
  public var geometry: Swift.String
  public var alternativeGeometry: Swift.String?
  public var option: NVDirectionKit.NVibeRouteOption
  public var coordinates: [CoreLocation.CLLocationCoordinate2D] {
    get
  }
  public var alternativeCoordinates: [CoreLocation.CLLocationCoordinate2D]? {
    get
  }
  @_documentation(visibility: private) public init(startAddress: NVDirectionKit.NVibeLocation, endAddress: NVDirectionKit.NVibeLocation, distance: Swift.Double, duration: Swift.Double, geometry: Swift.String, legs: [NVDirectionKit.NVibeLeg], option: NVDirectionKit.NVibeRouteOption = NVibeRouteOption())
  public func toGPX(speed: Swift.Double = 5000.0) -> Swift.String
  @_documentation(visibility: private) public func toDictionnary() -> [Swift.String : Any]
  @_documentation(visibility: private) public func updateSideStreet()
  @_documentation(visibility: private) public func updateTransitionFromOutdoorToIndoor()
  @_documentation(visibility: private) public func updateTransitionFromIndoorToOutdoor() -> (instruction: Swift.String, type: Swift.String, modifier: Swift.String, sideStreet: NVDirectionKit.SideStreet)?
  @objc deinit
}
@objc public class NVibeIndoorLocation : ObjectiveC.NSObject, NVDirectionKit.Location {
  public var address: Swift.String
  public var position: CoreLocation.CLLocationCoordinate2D
  public var access: CoreLocation.CLLocationCoordinate2D
  public var floor: Swift.Int
  @_documentation(visibility: private) public var altitude: Swift.Double
  public init(address: Swift.String, position: CoreLocation.CLLocationCoordinate2D, access: CoreLocation.CLLocationCoordinate2D, floor: Swift.Int)
  public init(address: Swift.String, position: CoreLocation.CLLocationCoordinate2D, floor: Swift.Int)
  public init(position: CoreLocation.CLLocationCoordinate2D, access: CoreLocation.CLLocationCoordinate2D, floor: Swift.Int)
  public init(position: CoreLocation.CLLocationCoordinate2D, floor: Swift.Int)
  @objc deinit
}
@_documentation(visibility: private) public let ErrorDomain: Swift.String
@_documentation(visibility: private) public let ErrorUnsupportedType: Swift.Int
@_documentation(visibility: private) public let ErrorIndexOutOfBounds: Swift.Int
@_documentation(visibility: private) public let ErrorWrongType: Swift.Int
@_documentation(visibility: private) public let ErrorNotExist: Swift.Int
@_documentation(visibility: private) public let ErrorInvalidJSON: Swift.Int
@_documentation(visibility: private) public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension NVDirectionKit.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
@_documentation(visibility: private) public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  @available(*, deprecated, message: "Use instead `init(parseJSON: )`")
  public static func parse(_ json: Swift.String) -> NVDirectionKit.JSON
  public mutating func merge(with other: NVDirectionKit.JSON) throws
  public func merged(with other: NVDirectionKit.JSON) throws -> NVDirectionKit.JSON
  public var type: NVDirectionKit.`Type` {
    get
  }
  public var error: NVDirectionKit.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: NVDirectionKit.JSON {
    get
  }
  public static var null: NVDirectionKit.JSON {
    get
  }
}
@_documentation(visibility: private) public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  @_documentation(visibility: private) public static func == (lhs: NVDirectionKit.Index<T>, rhs: NVDirectionKit.Index<T>) -> Swift.Bool
  @_documentation(visibility: private) public static func < (lhs: NVDirectionKit.Index<T>, rhs: NVDirectionKit.Index<T>) -> Swift.Bool
}
@_documentation(visibility: private) public typealias JSONIndex = NVDirectionKit.Index<NVDirectionKit.JSON>
@_documentation(visibility: private) public typealias JSONRawIndex = NVDirectionKit.Index<Any>
extension NVDirectionKit.JSON : Swift.Collection {
  @_documentation(visibility: private) public typealias Index = NVDirectionKit.JSONRawIndex
  public var startIndex: NVDirectionKit.JSON.Index {
    get
  }
  public var endIndex: NVDirectionKit.JSON.Index {
    get
  }
  public func index(after i: NVDirectionKit.JSON.Index) -> NVDirectionKit.JSON.Index
  public subscript(position: NVDirectionKit.JSON.Index) -> (Swift.String, NVDirectionKit.JSON) {
    get
  }
  public typealias Element = (Swift.String, NVDirectionKit.JSON)
  public typealias Indices = Swift.DefaultIndices<NVDirectionKit.JSON>
  public typealias Iterator = Swift.IndexingIterator<NVDirectionKit.JSON>
  public typealias SubSequence = Swift.Slice<NVDirectionKit.JSON>
}
@_documentation(visibility: private) public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
@_documentation(visibility: private) public protocol JSONSubscriptType {
  var jsonKey: NVDirectionKit.JSONKey { get }
}
extension Swift.Int : NVDirectionKit.JSONSubscriptType {
  public var jsonKey: NVDirectionKit.JSONKey {
    get
  }
}
extension Swift.String : NVDirectionKit.JSONSubscriptType {
  public var jsonKey: NVDirectionKit.JSONKey {
    get
  }
}
extension NVDirectionKit.JSON {
  public subscript(path: [any NVDirectionKit.JSONSubscriptType]) -> NVDirectionKit.JSON {
    get
    set
  }
  public subscript(path: any NVDirectionKit.JSONSubscriptType...) -> NVDirectionKit.JSON {
    get
    set
  }
}
extension NVDirectionKit.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension NVDirectionKit.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension NVDirectionKit.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension NVDirectionKit.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension NVDirectionKit.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension NVDirectionKit.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension NVDirectionKit.JSON : Swift.ExpressibleByNilLiteral {
  @available(*, deprecated, message: "use JSON.null instead. Will be removed in future versions")
  public init(nilLiteral: ())
}
extension NVDirectionKit.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [NVDirectionKit.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension NVDirectionKit.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension NVDirectionKit.JSON {
  public var array: [NVDirectionKit.JSON]? {
    get
  }
  public var arrayValue: [NVDirectionKit.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension NVDirectionKit.JSON {
  public var dictionary: [Swift.String : NVDirectionKit.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : NVDirectionKit.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension NVDirectionKit.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension NVDirectionKit.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension NVDirectionKit.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension NVDirectionKit.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension NVDirectionKit.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension NVDirectionKit.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension NVDirectionKit.JSON : Swift.Comparable {
}
@_documentation(visibility: private) public func == (lhs: NVDirectionKit.JSON, rhs: NVDirectionKit.JSON) -> Swift.Bool
@_documentation(visibility: private) public func <= (lhs: NVDirectionKit.JSON, rhs: NVDirectionKit.JSON) -> Swift.Bool
@_documentation(visibility: private) public func >= (lhs: NVDirectionKit.JSON, rhs: NVDirectionKit.JSON) -> Swift.Bool
@_documentation(visibility: private) public func > (lhs: NVDirectionKit.JSON, rhs: NVDirectionKit.JSON) -> Swift.Bool
@_documentation(visibility: private) public func < (lhs: NVDirectionKit.JSON, rhs: NVDirectionKit.JSON) -> Swift.Bool
@_documentation(visibility: private) public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: NVDirectionKit.writingOptionsKeys, b: NVDirectionKit.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_documentation(visibility: private) public protocol PhoneDirectionManagerDelegate : AnyObject {
  func onDirectionChanged(heading: Swift.Double?)
}
@objc open class NVibeRouteOption : ObjectiveC.NSObject {
  public var language: Swift.String
  public var withCrossing: Swift.Bool
  public var withObstacle: Swift.Bool
  public var withInformationPoint: Swift.Bool
  public var withAlternativeGeometry: Swift.Bool
  public var forbiddenObstacles: [Swift.String]
  public var viaLinks: [NVDirectionKit.Link]
  public var transitionData: NVDirectionKit.NVibeTransitionData?
  @_documentation(visibility: private) public init(language: Swift.String = "en", withCrossing: Swift.Bool = true, withObstacle: Swift.Bool = false, withInformationPoint: Swift.Bool = false, withAlternativeGeometry: Swift.Bool = false, forbiddenObstacles: [Swift.String] = [], viaLinks: [NVDirectionKit.Link] = [], transitionData: NVDirectionKit.NVibeTransitionData? = nil)
  @objc deinit
}
@objc open class NVibeTransitionData : ObjectiveC.NSObject {
  public var previousMultimodalStep: NVDirectionKit.NVibeMultimodalStep?
  public var currentMultimodalStep: NVDirectionKit.NVibeMultimodalStep
  public var nextMultimodalStep: NVDirectionKit.NVibeMultimodalStep?
  @_documentation(visibility: private) public init(previousMultimodalStep: NVDirectionKit.NVibeMultimodalStep? = nil, currentMultimodalStep: NVDirectionKit.NVibeMultimodalStep, nextMultimodalStep: NVDirectionKit.NVibeMultimodalStep? = nil)
  @objc deinit
}
@objc open class Link : ObjectiveC.NSObject, Swift.Codable {
  public var id: Swift.Int
  @_documentation(visibility: private) public var side: Swift.String?
  @_documentation(visibility: private) public var sideStreet: NVDirectionKit.SideStreet? {
    get
  }
  @_documentation(visibility: private) public var stepIndex: Swift.Int?
  @_documentation(visibility: private) public init(id: Swift.Int, sideStreet: NVDirectionKit.SideStreet? = nil, stepIndex: Swift.Int? = nil)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_documentation(visibility: private) open class NVibeIntersection : ObjectiveC.NSObject, Swift.Codable {
  public var entry: [Swift.Bool]
  public var `in`: Swift.Int?
  public var out: Swift.Int?
  public var geometry_index: Swift.Int
  public var bearings: [Swift.Double]
  public var location: [Swift.Double]
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public init(entry: [Swift.Bool], in: Swift.Int?, out: Swift.Int?, bearings: [Swift.Double], location: [Swift.Double], index: Swift.Int)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class NVibeMultimodalStep : ObjectiveC.NSObject {
  public var startAddress: NVDirectionKit.NVibeLocation
  public var endAddress: NVDirectionKit.NVibeLocation
  public var distance: Swift.Double
  public var duration: Swift.Double
  public var information: NVDirectionKit.NVibeMultimodalStepInformation
  @_documentation(visibility: private) public init(startAddress: NVDirectionKit.NVibeLocation, endAddress: NVDirectionKit.NVibeLocation, distance: Swift.Double, duration: Swift.Double, information: NVDirectionKit.NVibeMultimodalStepInformation = NVibeMultimodalStepInformation(mode: .WALKING))
  public func isWalkingStep() -> Swift.Bool
  public func isIndoorStep() -> Swift.Bool
  public func isTransitStep() -> Swift.Bool
  public func isWalkingTransitChangeStep() -> Swift.Bool
  @objc deinit
}
@objc open class NVibeManeuver : ObjectiveC.NSObject, Swift.Codable {
  public var bearing_before: Swift.Double
  public var bearing_after: Swift.Double
  public var type: Swift.String
  public var modifier: Swift.String?
  @_documentation(visibility: private) public var location: [Swift.Double]
  public var instruction: Swift.String
  public var turn_direction: Swift.Int?
  public var details: [NVDirectionKit.NVibeManeuverDetail]
  public var coordinate: CoreLocation.CLLocationCoordinate2D {
    get
  }
  @_documentation(visibility: private) public init(bearing_before: Swift.Double, bearing_after: Swift.Double, type: Swift.String, modifier: Swift.String?, location: [Swift.Double], instruction: Swift.String, details: [NVDirectionKit.NVibeManeuverDetail] = [])
  @_documentation(visibility: private) public func getManeuver() -> [NVDirectionKit.NVibeManeuverDetailsWithDirection]
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum RouteError {
  case noConnection
  case noRoute
  case invalidToken
  case missingToken
  case maximumRequestReached
  case maximumRouteDistanceReached
  case unknow
  public static func == (a: NVDirectionKit.RouteError, b: NVDirectionKit.RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NVDirectionKit.RouteError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum MultimodalError {
  case noConnection
  case noMultimodalRoute
  case outOfScope
  case multipleRegion
  case invalidToken
  case missingToken
  case maximumRequestReached
  case unknow
  public static func == (a: NVDirectionKit.MultimodalError, b: NVDirectionKit.MultimodalError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension NVDirectionKit.MultimodalError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Swift.Double {
  public func reversed() -> CoreLocation.CLLocationDirection
}
extension Swift.Int {
  public func reversed() -> Swift.Int
}
public enum SideStreet : Swift.String {
  case LEFT
  case RIGHT
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension NVDirectionKit.SideStreet {
  @_documentation(visibility: private) public func toModifier() -> Swift.String
  @_documentation(visibility: private) public func reversed() -> NVDirectionKit.SideStreet
}
@_documentation(visibility: private) public class PhoneState {
  public enum State {
    case POCKET, HAND, TRANSITION
    public static func == (a: NVDirectionKit.PhoneState.State, b: NVDirectionKit.PhoneState.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var state: NVDirectionKit.PhoneState.State
  public var orientation: CoreLocation.CLDeviceOrientation?
  public init(state: NVDirectionKit.PhoneState.State, orientation: CoreLocation.CLDeviceOrientation? = nil)
  @objc deinit
}
@_documentation(visibility: private) public class Attitude {
  public var pitch: Swift.Double
  public var roll: Swift.Double
  public var yaw: Swift.Double
  public var handHeading: Swift.Double?
  public var pocketHeading: Swift.Double?
  public var heading: Swift.Double?
  public init(pitch: Swift.Double, roll: Swift.Double, yaw: Swift.Double, phoneState: NVDirectionKit.PhoneState? = nil)
  @objc deinit
}
extension Swift.Array {
  public var lastIndex: Swift.Int {
    get
  }
}
@objc open class NVibeMultimodalRoute : ObjectiveC.NSObject {
  public var startAddress: NVDirectionKit.NVibeLocation
  public var endAddress: NVDirectionKit.NVibeLocation
  public var distance: Swift.Double
  public var duration: Swift.Double
  public var steps: [NVDirectionKit.NVibeMultimodalStep]
  @_documentation(visibility: private) public init(startAddress: NVDirectionKit.NVibeLocation, endAddress: NVDirectionKit.NVibeLocation, distance: Swift.Double, duration: Swift.Double, steps: [NVDirectionKit.NVibeMultimodalStep])
  @_documentation(visibility: private) public func description()
  public func reversed(endLocation: NVDirectionKit.NVibeLocation? = nil) -> NVDirectionKit.NVibeMultimodalRoute
  @objc deinit
}
@_documentation(visibility: private) public class NVibeManeuverDetailsWithDirection {
  public var details: [NVDirectionKit.NVibeManeuverDetail]
  public var direction: [Swift.Int]
  public init(details: [NVDirectionKit.NVibeManeuverDetail], direction: [Swift.Int] = [])
  public func showData()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_documentation(visibility: private) open class NVPhoneStateDetection : ObjectiveC.NSObject {
  public static let shared: NVDirectionKit.NVPhoneStateDetection
  public var isPhoneStateDetectionRunning: Swift.Bool
  public func startPhoneStateDetection(completion: @escaping () -> Swift.Void)
  public func stopPhoneStateDetection()
  public func setFollowedUserDirection(direction: CoreLocation.CLLocationDirection?)
  public func getOffsetFromUserDirection() -> Swift.Double?
  public func getUserDirection() -> Swift.Double?
  public func getCurrentPhoneState() -> NVDirectionKit.PhoneState
  @objc override dynamic public init()
  @objc deinit
}
@_documentation(visibility: private) public enum TokenError : Swift.Int {
  case INVALID_TOKEN
  case MAX_ACTIVE_USER_REACHED
  case UNKNOW
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_documentation(visibility: private) public class NVSDKTokenValidation : ObjectiveC.NSObject {
  public static let shared: NVDirectionKit.NVSDKTokenValidation
  public func isValid(completion: @escaping (NVDirectionKit.TokenError?) -> Swift.Void)
  @objc deinit
}
extension Swift.Double {
  public func toRadian() -> Swift.Double
  public func toDegree() -> Swift.Double
  public func roundToInt() -> Swift.Int
  public func direction(to bearing: Swift.Double) -> Swift.Double
  public func isBetween(direction: Swift.Int, threshold: Swift.Int = 14) -> Swift.Bool
  public func toDuration(speed: Swift.Double = 5000.0) -> Swift.Double
  public func toDistance(speed: Swift.Double = 5000.0) -> Swift.Double
}
extension Swift.Array where Element == Swift.Double {
  public func getMedian() -> Swift.Double?
}
@objc open class NVibeInformationPoint : ObjectiveC.NSObject, Swift.Codable {
  public var information: Swift.String
  public var position: [Swift.Double]
  public var projection: [Swift.Double]
  @_documentation(visibility: private) public var distance: Swift.Double?
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_documentation(visibility: private) public struct Polyline {
  public let coordinates: [CoreLocation.CLLocationCoordinate2D]?
  public let encodedPolyline: Swift.String
  public let levels: [Swift.UInt32]?
  public let encodedLevels: Swift.String?
  public var locations: [CoreLocation.CLLocation]? {
    get
  }
  @available(tvOS 9.2, *)
  public var mkPolyline: MapKit.MKPolyline? {
    get
  }
  public init(coordinates: [CoreLocation.CLLocationCoordinate2D], levels: [Swift.UInt32]? = nil, precision: Swift.Double = 1e5)
  public init(encodedPolyline: Swift.String, encodedLevels: Swift.String? = nil, precision: Swift.Double = 1e5)
  public init(locations: [CoreLocation.CLLocation], levels: [Swift.UInt32]? = nil, precision: Swift.Double = 1e5)
}
@_documentation(visibility: private) public func encodeCoordinates(_ coordinates: [CoreLocation.CLLocationCoordinate2D], precision: Swift.Double = 1e5) -> Swift.String
@_documentation(visibility: private) public func encodeLocations(_ locations: [CoreLocation.CLLocation], precision: Swift.Double = 1e5) -> Swift.String
@_documentation(visibility: private) public func encodeLevels(_ levels: [Swift.UInt32]) -> Swift.String
@_documentation(visibility: private) public func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 1e5) -> [CoreLocation.CLLocationCoordinate2D]?
@_documentation(visibility: private) public func decodePolyline(_ encodedPolyline: Swift.String, precision: Swift.Double = 1e5) -> [CoreLocation.CLLocation]?
@_documentation(visibility: private) public func decodeLevels(_ encodedLevels: Swift.String) -> [Swift.UInt32]?
extension Foundation.NSNotification.Name {
  @_documentation(visibility: private) public static let NOTIFICATION_PHONE_STATE_CHANGED: Foundation.Notification.Name
}
@objc open class NVibeLeg : ObjectiveC.NSObject, Swift.Codable {
  public var distance: Swift.Double
  public var duration: Swift.Double {
    get
    set
  }
  public var steps: [NVDirectionKit.NVibeStep]
  @_documentation(visibility: private) public init(distance: Swift.Double, duration: Swift.Double, steps: [NVDirectionKit.NVibeStep])
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc open class NVibeStep : ObjectiveC.NSObject, Swift.Codable {
  @_documentation(visibility: private) public var intersections: [NVDirectionKit.NVibeIntersection]
  public var distance: Swift.Double
  @_documentation(visibility: private) public var mode: Swift.String
  public var geometry: Swift.String
  public var maneuver: NVDirectionKit.NVibeManeuver
  public var duration: Swift.Double {
    get
    set
  }
  @_documentation(visibility: private) public var name: Swift.String
  public var obstacles: [NVDirectionKit.NVibeObstacle]?
  public var informationPoints: [NVDirectionKit.NVibeInformationPoint]?
  public var links: [NVDirectionKit.Link]?
  public var walkingSide: Swift.String {
    get
    set
  }
  public var streetName: Swift.String {
    get
    set
  }
  public var coordinates: [CoreLocation.CLLocationCoordinate2D] {
    get
  }
  @_documentation(visibility: private) public init(distance: Swift.Double, duration: Swift.Double, geometry: Swift.String, intersections: [NVDirectionKit.NVibeIntersection], maneuver: NVDirectionKit.NVibeManeuver, walkingSide: Swift.String, streetName: Swift.String)
  @objc deinit
  open func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
extension NVDirectionKit.NVibeMultimodalStepInformation.Mode : Swift.Equatable {}
extension NVDirectionKit.NVibeMultimodalStepInformation.Mode : Swift.Hashable {}
extension NVDirectionKit.NVibeMultimodalStepInformation.Mode : Swift.RawRepresentable {}
extension NVDirectionKit.NVibeWalkingInformation.Mode : Swift.Equatable {}
extension NVDirectionKit.NVibeWalkingInformation.Mode : Swift.Hashable {}
extension NVDirectionKit.NVibeWalkingInformation.Mode : Swift.RawRepresentable {}
extension NVDirectionKit.NVibeTransitInformation.Mode : Swift.Equatable {}
extension NVDirectionKit.NVibeTransitInformation.Mode : Swift.Hashable {}
extension NVDirectionKit.NVibeTransitInformation.Mode : Swift.RawRepresentable {}
extension NVDirectionKit.SwiftyJSONError : Swift.Equatable {}
extension NVDirectionKit.SwiftyJSONError : Swift.Hashable {}
extension NVDirectionKit.SwiftyJSONError : Swift.RawRepresentable {}
extension NVDirectionKit.`Type` : Swift.Equatable {}
extension NVDirectionKit.`Type` : Swift.Hashable {}
extension NVDirectionKit.`Type` : Swift.RawRepresentable {}
extension NVDirectionKit.writingOptionsKeys : Swift.Equatable {}
extension NVDirectionKit.writingOptionsKeys : Swift.Hashable {}
extension NVDirectionKit.RouteError : Swift.Equatable {}
extension NVDirectionKit.RouteError : Swift.Hashable {}
extension NVDirectionKit.MultimodalError : Swift.Equatable {}
extension NVDirectionKit.MultimodalError : Swift.Hashable {}
extension NVDirectionKit.SideStreet : Swift.Equatable {}
extension NVDirectionKit.SideStreet : Swift.Hashable {}
extension NVDirectionKit.SideStreet : Swift.RawRepresentable {}
extension NVDirectionKit.PhoneState.State : Swift.Equatable {}
extension NVDirectionKit.PhoneState.State : Swift.Hashable {}
extension NVDirectionKit.TokenError : Swift.Equatable {}
extension NVDirectionKit.TokenError : Swift.Hashable {}
extension NVDirectionKit.TokenError : Swift.RawRepresentable {}
