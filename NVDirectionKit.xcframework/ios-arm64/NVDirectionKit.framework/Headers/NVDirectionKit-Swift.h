#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef NVDIRECTIONKIT_SWIFT_H
#define NVDIRECTIONKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="NVDirectionKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// The link along an alternative walking route.
/// A <code>Link</code> object contains an id. When calculating alternative walking multimodal route, <code>Link</code> objects are provided inside <code>NVibeWalkingInformation/links</code> and can be used with <code>NVibeRouteOption</code> when requesting a walking route with <code>NVDirection/getNavigationRoute(from:to:sideStreet:option:)</code> to force the calculated walking route to pass through specific street.
/// <h2>Topics</h2>
/// <h3>Getting the link point attributes</h3>
/// <ul>
///   <li>
///     <code>id</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit4Link")
@interface Link : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The object you use to mainly request route and multimodal route.
/// A <code>NVDirection</code> object is used to request route.
/// For more information, see <a href="doc:GetRoute">doc:GetRoute</a>.
/// <h2>Topics</h2>
/// <h3>Accessing services</h3>
/// <ul>
///   <li>
///     <code>shared</code>
///   </li>
/// </ul>
/// <h3>Requesting walking route</h3>
/// <ul>
///   <li>
///     <code>getStartingDirection(from:to:completion:)</code>
///   </li>
///   <li>
///     <code>getStartingDirection(from:to:)</code>
///   </li>
///   <li>
///     <code>getNavigationRoute(from:to:sideStreet:language:withObstacle:forbiddenObstacles:withInformationPoint:withAlternativePolyline:completion:)</code>
///   </li>
///   <li>
///     <code>getNavigationRoute(from:to:sideStreet:language:withObstacle:forbiddenObstacles:withInformationPoint:withAlternativePolyline:)</code>
///   </li>
///   <li>
///     <code>getNavigationRouteWithoutCrossing(from:to:option:)</code>
///   </li>
///   <li>
///     <code>getNavigationRoute(from:to:sideStreet:option:)</code>
///   </li>
///   <li>
///     <code>getCustomNavigationRoute(from:to:with:language:completion:)</code>
///   </li>
///   <li>
///     <code>getCustomNavigationRoute(from:to:with:language:)</code>
///   </li>
/// </ul>
/// <h3>Requesting multimodal route</h3>
/// <ul>
///   <li>
///     <code>getMultimodalRoute(from:to:onlyFullWalking:withFullWalkingAlternative:avoid:completion:)</code>
///   </li>
///   <li>
///     <code>getMultimodalRoute(from:to:onlyFullWalking:withFullWalkingAlternative:avoid:)</code>
///   </li>
///   <li>
///     <code>getNextDeparture(from:count:completion:)</code>
///   </li>
///   <li>
///     <code>getNextDeparture(from:count:)</code>
///   </li>
/// </ul>
/// <h3>Cancelling request</h3>
/// <ul>
///   <li>
///     <code>cancelRoute()</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit11NVDirection")
@interface NVDirection : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC14NVDirectionKit16NVPhoneDirection")
@interface NVPhoneDirection : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14NVDirectionKit21NVPhoneStateDetection")
@interface NVPhoneStateDetection : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC14NVDirectionKit20NVSDKTokenValidation")
@interface NVSDKTokenValidation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The address and coordinates of a indoor location.
/// A <code>NVibeIndoorLocation</code> object contains the optional address of the location, the position coordinate of the location, the optional access coordinate of the location, the floor of the location and the optional altitude of the location.
/// For more information about access coordinate, see <code>NVibeLocation</code>.
/// <h2>Topics</h2>
/// <h3>Creating an indoor location</h3>
/// <ul>
///   <li>
///     <code>init(address:position:access:floor:)</code>
///   </li>
///   <li>
///     <code>init(address:position:floor:)</code>
///   </li>
///   <li>
///     <code>init(position:access:floor:)</code>
///   </li>
///   <li>
///     <code>init(position:floor:)</code>
///   </li>
/// </ul>
/// <h3>Getting the indoor location attributes</h3>
/// <ul>
///   <li>
///     <code>address</code>
///   </li>
///   <li>
///     <code>position</code>
///   </li>
///   <li>
///     <code>access</code>
///   </li>
///   <li>
///     <code>floor</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit19NVibeIndoorLocation")
@interface NVibeIndoorLocation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The information point along a route.
/// A <code>NVibeInformationPoint</code> object contains a information, the position coordinate of the information point, the projection on the route of the information point.
/// <h2>Topics</h2>
/// <h3>Getting the information point attributes</h3>
/// <ul>
///   <li>
///     <code>information</code>
///   </li>
///   <li>
///     <code>position</code>
///   </li>
///   <li>
///     <code>projection</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit21NVibeInformationPoint")
@interface NVibeInformationPoint : NSObject
@end


SWIFT_CLASS("_TtC14NVDirectionKit17NVibeIntersection")
@interface NVibeIntersection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The walking leg inside walking route.
/// <h2>Topics</h2>
/// <h3>Getting the walking leg attributes</h3>
/// <ul>
///   <li>
///     <code>distance</code>
///   </li>
///   <li>
///     <code>duration</code>
///   </li>
///   <li>
///     <code>steps</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit8NVibeLeg")
@interface NVibeLeg : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The address and coordinates of a location.
/// A <code>NVibeLocation</code> object contains the optional address of the location, the position coordinate of the location and the optional access coordinate of the location.
/// Generally, the position coordinate represents the coordinate of the building or place while the access coordinate represents the coordinate on the route to enter/exit the location. Most of routing engine use the nearest route from the given start and end coordinate to determine the departure and arrival coordinate but sometimes, the nearest route is not the real departure or arrival. Use access coordinate to be sure that calculated route will start and end from the right departure and arrival.
/// <h2>Topics</h2>
/// <h3>Creating a location</h3>
/// <ul>
///   <li>
///     <code>init(address:position:access:)</code>
///   </li>
///   <li>
///     <code>init(address:position:)</code>
///   </li>
///   <li>
///     <code>init(position:access:)</code>
///   </li>
///   <li>
///     <code>init(position:)</code>
///   </li>
/// </ul>
/// <h3>Getting the location attributes</h3>
/// <ul>
///   <li>
///     <code>address</code>
///   </li>
///   <li>
///     <code>position</code>
///   </li>
///   <li>
///     <code>access</code>
///   </li>
///   <li>
///     <code>reference</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit13NVibeLocation")
@interface NVibeLocation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The maneuver of the walking step.
/// <h2>Topics</h2>
/// <h3>Getting the maneuver attributes</h3>
/// <ul>
///   <li>
///     <code>type</code>
///   </li>
///   <li>
///     <code>modifier</code>
///   </li>
///   <li>
///     <code>bearing_before</code>
///   </li>
///   <li>
///     <code>bearing_after</code>
///   </li>
///   <li>
///     <code>coordinate</code>
///   </li>
///   <li>
///     <code>instruction</code>
///   </li>
///   <li>
///     <code>turn_direction</code>
///   </li>
///   <li>
///     <code>details</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit13NVibeManeuver")
@interface NVibeManeuver : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The detail inside maneuver.
/// The <code>NVibeManeuverDetail</code> object describes the global <code>NVibeManeuver</code> with single instruction.
/// <h2>Topics</h2>
/// <h3>Getting the maneuver detail attributes</h3>
/// <ul>
///   <li>
///     <code>type</code>
///   </li>
///   <li>
///     <code>modifier</code>
///   </li>
///   <li>
///     <code>name</code>
///   </li>
///   <li>
///     <code>instruction</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit19NVibeManeuverDetail")
@interface NVibeManeuverDetail : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The multimodal route received when requesting multimodal route.
/// <h2>Topics</h2>
/// <h3>Getting the multimodal route attributes</h3>
/// <ul>
///   <li>
///     <code>startAddress</code>
///   </li>
///   <li>
///     <code>endAddress</code>
///   </li>
///   <li>
///     <code>distance</code>
///   </li>
///   <li>
///     <code>duration</code>
///   </li>
///   <li>
///     <code>steps</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit20NVibeMultimodalRoute")
@interface NVibeMultimodalRoute : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The multimodal step inside multimodal route.
/// <h2>Topics</h2>
/// <h3>Getting the multimodal step attributes</h3>
/// <ul>
///   <li>
///     <code>startAddress</code>
///   </li>
///   <li>
///     <code>endAddress</code>
///   </li>
///   <li>
///     <code>distance</code>
///   </li>
///   <li>
///     <code>duration</code>
///   </li>
///   <li>
///     <code>information</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit19NVibeMultimodalStep")
@interface NVibeMultimodalStep : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The information describing a multimodal step.
/// <h2>Topics</h2>
/// <h3>Getting the multimodal step information attributes</h3>
/// <ul>
///   <li>
///     <code>mode</code>
///   </li>
///   <li>
///     <code>getWalkingInformation()</code>
///   </li>
///   <li>
///     <code>getTransitInformation()</code>
///   </li>
///   <li>
///     <code>Mode</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit30NVibeMultimodalStepInformation")
@interface NVibeMultimodalStepInformation : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The obstacle along a route.
/// A <code>NVibeObstacle</code> object contains the id of the obstacle, the type of the obstacle, the position coordinate of the obstacle, the projection on the route of the obstacle and the url photo of the obstacle.
/// <h2>Topics</h2>
/// <h3>Getting the obstacle attributes</h3>
/// <ul>
///   <li>
///     <code>id</code>
///   </li>
///   <li>
///     <code>type</code>
///   </li>
///   <li>
///     <code>position</code>
///   </li>
///   <li>
///     <code>projection</code>
///   </li>
///   <li>
///     <code>photo</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit13NVibeObstacle")
@interface NVibeObstacle : NSObject
@end


SWIFT_CLASS("_TtC14NVDirectionKit15NVibeProjection")
@interface NVibeProjection : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The walking route received when requesting walking route.
/// <h2>Topics</h2>
/// <h3>Getting the walking route attributes</h3>
/// <ul>
///   <li>
///     <code>startAddress</code>
///   </li>
///   <li>
///     <code>endAddress</code>
///   </li>
///   <li>
///     <code>distance</code>
///   </li>
///   <li>
///     <code>duration</code>
///   </li>
///   <li>
///     <code>legs</code>
///   </li>
///   <li>
///     <code>geometry</code>
///   </li>
///   <li>
///     <code>alternativeGeometry</code>
///   </li>
///   <li>
///     <code>coordinates</code>
///   </li>
///   <li>
///     <code>option</code>
///   </li>
/// </ul>
/// <h3>Getting the GPX from the walking route</h3>
/// <ul>
///   <li>
///     <code>toGPX(speed:)</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit10NVibeRoute")
@interface NVibeRoute : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The option for walking route.
/// The <code>NVibeRouteOption</code> object keeps your option when requesting the walking route for navigation reroute.
/// <h2>Topics</h2>
/// <h3>Getting the option attributes</h3>
/// <ul>
///   <li>
///     <code>language</code>
///   </li>
///   <li>
///     <code>withCrossing</code>
///   </li>
///   <li>
///     <code>withObstacle</code>
///   </li>
///   <li>
///     <code>forbiddenObstacles</code>
///   </li>
///   <li>
///     <code>withInformationPoint</code>
///   </li>
///   <li>
///     <code>withAlternativeGeometry</code>
///   </li>
///   <li>
///     <code>viaLinks</code>
///   </li>
///   <li>
///     <code>transitionData</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit16NVibeRouteOption")
@interface NVibeRouteOption : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The walking step inside walking leg.
/// <h2>Topics</h2>
/// <h3>Getting the walking step attributes</h3>
/// <ul>
///   <li>
///     <code>distance</code>
///   </li>
///   <li>
///     <code>duration</code>
///   </li>
///   <li>
///     <code>maneuver</code>
///   </li>
///   <li>
///     <code>walkingSide</code>
///   </li>
///   <li>
///     <code>streetName</code>
///   </li>
///   <li>
///     <code>geometry</code>
///   </li>
///   <li>
///     <code>coordinates</code>
///   </li>
///   <li>
///     <code>obstacles</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit9NVibeStep")
@interface NVibeStep : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The walking information describing a walking multimodal step.
/// <h2>Topics</h2>
/// <h3>Getting the walking information attributes</h3>
/// <ul>
///   <li>
///     <code>departureStop</code>
///   </li>
///   <li>
///     <code>arrivalStop</code>
///   </li>
///   <li>
///     <code>transitMode</code>
///   </li>
///   <li>
///     <code>distance</code>
///   </li>
///   <li>
///     <code>duration</code>
///   </li>
///   <li>
///     <code>stopNumber</code>
///   </li>
///   <li>
///     <code>stops</code>
///   </li>
///   <li>
///     <code>coordinates</code>
///   </li>
///   <li>
///     <code>headsign</code>
///   </li>
///   <li>
///     <code>textColor</code>
///   </li>
///   <li>
///     <code>backgroundColor</code>
///   </li>
///   <li>
///     <code>type</code>
///   </li>
///   <li>
///     <code>line</code>
///   </li>
///   <li>
///     <code>departureTime</code>
///   </li>
///   <li>
///     <code>Mode</code>
///   </li>
/// </ul>
/// <h3>Getting the GPX from the transit multimodal step</h3>
/// <ul>
///   <li>
///     <code>toGPX(speed:)</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit23NVibeTransitInformation")
@interface NVibeTransitInformation : NVibeMultimodalStepInformation
@end


/// The transition data for walking route.
/// The <code>NVibeTransitionData</code> object keeps your current, previous and next multimodal step for transition with indoor.
/// <h2>Topics</h2>
/// <h3>Getting the transition data attributes</h3>
/// <ul>
///   <li>
///     <code>previousMultimodalStep</code>
///   </li>
///   <li>
///     <code>currentMultimodalStep</code>
///   </li>
///   <li>
///     <code>nextMultimodalStep</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit19NVibeTransitionData")
@interface NVibeTransitionData : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The walking information describing a walking multimodal step.
/// <h2>Topics</h2>
/// <h3>Getting the walking information attributes</h3>
/// <ul>
///   <li>
///     <code>startAddress</code>
///   </li>
///   <li>
///     <code>endAddress</code>
///   </li>
///   <li>
///     <code>walkingMode</code>
///   </li>
///   <li>
///     <code>Mode</code>
///   </li>
/// </ul>
SWIFT_CLASS("_TtC14NVDirectionKit23NVibeWalkingInformation")
@interface NVibeWalkingInformation : NVibeMultimodalStepInformation
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
